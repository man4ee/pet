#include <memory.h>
#include <string.h>
#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <gtest/gtest.h>
#define STRIBOG256_HASH_LENGTH	32
#define STRIBOG512_HASH_LENGTH	64
#define STRIBOG_STATE_LENGTH	64
/* таблица подстановки */
static uint8_t pi[] =
{
	0xfc, 0xee, 0xdd, 0x11, 0xcf, 0x6e, 0x31, 0x16, 0xfb, 0xc4, 0xfa, 0xda, 0x23, 0xc5, 0x04, 0x4d, 
	0xe9, 0x77, 0xf0, 0xdb, 0x93, 0x2e, 0x99, 0xba, 0x17, 0x36, 0xf1, 0xbb, 0x14, 0xcd, 0x5f, 0xc1, 
	0xf9, 0x18, 0x65, 0x5a, 0xe2, 0x5c, 0xef, 0x21, 0x81, 0x1c, 0x3c, 0x42, 0x8b, 0x01, 0x8e, 0x4f, 
	0x05, 0x84, 0x02, 0xae, 0xe3, 0x6a, 0x8f, 0xa0, 0x06, 0x0b, 0xed, 0x98, 0x7f, 0xd4, 0xd3, 0x1f, 
	0xeb, 0x34, 0x2c, 0x51, 0xea, 0xc8, 0x48, 0xab, 0xf2, 0x2a, 0x68, 0xa2, 0xfd, 0x3a, 0xce, 0xcc, 
	0xb5, 0x70, 0x0e, 0x56, 0x08, 0x0c, 0x76, 0x12, 0xbf, 0x72, 0x13, 0x47, 0x9c, 0xb7, 0x5d, 0x87, 
	0x15, 0xa1, 0x96, 0x29, 0x10, 0x7b, 0x9a, 0xc7, 0xf3, 0x91, 0x78, 0x6f, 0x9d, 0x9e, 0xb2, 0xb1, 
	0x32, 0x75, 0x19, 0x3d, 0xff, 0x35, 0x8a, 0x7e, 0x6d, 0x54, 0xc6, 0x80, 0xc3, 0xbd, 0x0d, 0x57, 
	0xdf, 0xf5, 0x24, 0xa9, 0x3e, 0xa8, 0x43, 0xc9, 0xd7, 0x79, 0xd6, 0xf6, 0x7c, 0x22, 0xb9, 0x03, 
	0xe0, 0x0f, 0xec, 0xde, 0x7a, 0x94, 0xb0, 0xbc, 0xdc, 0xe8, 0x28, 0x50, 0x4e, 0x33, 0x0a, 0x4a, 
	0xa7, 0x97, 0x60, 0x73, 0x1e, 0x00, 0x62, 0x44, 0x1a, 0xb8, 0x38, 0x82, 0x64, 0x9f, 0x26, 0x41, 
	0xad, 0x45, 0x46, 0x92, 0x27, 0x5e, 0x55, 0x2f, 0x8c, 0xa3, 0xa5, 0x7d, 0x69, 0xd5, 0x95, 0x3b, 
	0x07, 0x58, 0xb3, 0x40, 0x86, 0xac, 0x1d, 0xf7, 0x30, 0x37, 0x6b, 0xe4, 0x88, 0xd9, 0xe7, 0x89, 
	0xe1, 0x1b, 0x83, 0x49, 0x4c, 0x3f, 0xf8, 0xfe, 0x8d, 0x53, 0xaa, 0x90, 0xca, 0xd8, 0x85, 0x61, 
	0x20, 0x71, 0x67, 0xa4, 0x2d, 0x2b, 0x09, 0x5b, 0xcb, 0x9b, 0x25, 0xd0, 0xbe, 0xe5, 0x6c, 0x52, 
	0x59, 0xa6, 0x74, 0xd2, 0xe6, 0xf4, 0xb4, 0xc0, 0xd1, 0x66, 0xaf, 0xc2, 0x39, 0x4b, 0x63, 0xb6
};
/* таблица перестановки */
static uint8_t tau[] =
{
	0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
	0x01, 0x09, 0x11, 0x19, 0x21, 0x29, 0x31, 0x39,
	0x02, 0x0a, 0x12, 0x1a, 0x22, 0x2a, 0x32, 0x3a,
	0x03, 0x0b, 0x13, 0x1b, 0x23, 0x2b, 0x33, 0x3b,
	0x04, 0x0c, 0x14, 0x1c, 0x24, 0x2c, 0x34, 0x3c,
	0x05, 0x0d, 0x15, 0x1d, 0x25, 0x2d, 0x35, 0x3d,
	0x06, 0x0e, 0x16, 0x1e, 0x26, 0x2e, 0x36, 0x3e,
	0x07, 0x0f, 0x17, 0x1f, 0x27, 0x2f, 0x37, 0x3f
};
/* матрица линейного преобразования */
static uint8_t a_matrix[] =
{
	0x8e, 0x20, 0xfa, 0xa7, 0x2b, 0xa0, 0xb4, 0x70,
	0x47, 0x10, 0x7d, 0xdd, 0x9b, 0x50, 0x5a, 0x38,
	0xad, 0x08, 0xb0, 0xe0, 0xc3, 0x28, 0x2d, 0x1c,
	0xd8, 0x04, 0x58, 0x70, 0xef, 0x14, 0x98, 0x0e,
	0x6c, 0x02, 0x2c, 0x38, 0xf9, 0x0a, 0x4c, 0x07,
	0x36, 0x01, 0x16, 0x1c, 0xf2, 0x05, 0x26, 0x8d,
	0x1b, 0x8e, 0x0b, 0x0e, 0x79, 0x8c, 0x13, 0xc8,
	0x83, 0x47, 0x8b, 0x07, 0xb2, 0x46, 0x87, 0x64,
	0xa0, 0x11, 0xd3, 0x80, 0x81, 0x8e, 0x8f, 0x40,
	0x50, 0x86, 0xe7, 0x40, 0xce, 0x47, 0xc9, 0x20,
	0x28, 0x43, 0xfd, 0x20, 0x67, 0xad, 0xea, 0x10,
	0x14, 0xaf, 0xf0, 0x10, 0xbd, 0xd8, 0x75, 0x08,
	0x0a, 0xd9, 0x78, 0x08, 0xd0, 0x6c, 0xb4, 0x04,
	0x05, 0xe2, 0x3c, 0x04, 0x68, 0x36, 0x5a, 0x02,
	0x8c, 0x71, 0x1e, 0x02, 0x34, 0x1b, 0x2d, 0x01,
	0x46, 0xb6, 0x0f, 0x01, 0x1a, 0x83, 0x98, 0x8e,
	0x90, 0xda, 0xb5, 0x2a, 0x38, 0x7a, 0xe7, 0x6f,
	0x48, 0x6d, 0xd4, 0x15, 0x1c, 0x3d, 0xfd, 0xb9,
	0x24, 0xb8, 0x6a, 0x84, 0x0e, 0x90, 0xf0, 0xd2,
	0x12, 0x5c, 0x35, 0x42, 0x07, 0x48, 0x78, 0x69,
	0x09, 0x2e, 0x94, 0x21, 0x8d, 0x24, 0x3c, 0xba,
	0x8a, 0x17, 0x4a, 0x9e, 0xc8, 0x12, 0x1e, 0x5d,
	0x45, 0x85, 0x25, 0x4f, 0x64, 0x09, 0x0f, 0xa0,
	0xac, 0xcc, 0x9c, 0xa9, 0x32, 0x8a, 0x89, 0x50,
	0x9d, 0x4d, 0xf0, 0x5d, 0x5f, 0x66, 0x14, 0x51,
	0xc0, 0xa8, 0x78, 0xa0, 0xa1, 0x33, 0x0a, 0xa6,
	0x60, 0x54, 0x3c, 0x50, 0xde, 0x97, 0x05, 0x53,
	0x30, 0x2a, 0x1e, 0x28, 0x6f, 0xc5, 0x8c, 0xa7,
	0x18, 0x15, 0x0f, 0x14, 0xb9, 0xec, 0x46, 0xdd,
	0x0c, 0x84, 0x89, 0x0a, 0xd2, 0x76, 0x23, 0xe0,
	0x06, 0x42, 0xca, 0x05, 0x69, 0x3b, 0x9f, 0x70,
	0x03, 0x21, 0x65, 0x8c, 0xba, 0x93, 0xc1, 0x38,
	0x86, 0x27, 0x5d, 0xf0, 0x9c, 0xe8, 0xaa, 0xa8,
	0x43, 0x9d, 0xa0, 0x78, 0x4e, 0x74, 0x55, 0x54,
	0xaf, 0xc0, 0x50, 0x3c, 0x27, 0x3a, 0xa4, 0x2a,
	0xd9, 0x60, 0x28, 0x1e, 0x9d, 0x1d, 0x52, 0x15,
	0xe2, 0x30, 0x14, 0x0f, 0xc0, 0x80, 0x29, 0x84,
	0x71, 0x18, 0x0a, 0x89, 0x60, 0x40, 0x9a, 0x42,
	0xb6, 0x0c, 0x05, 0xca, 0x30, 0x20, 0x4d, 0x21,
	0x5b, 0x06, 0x8c, 0x65, 0x18, 0x10, 0xa8, 0x9e,
	0x45, 0x6c, 0x34, 0x88, 0x7a, 0x38, 0x05, 0xb9,
	0xac, 0x36, 0x1a, 0x44, 0x3d, 0x1c, 0x8c, 0xd2,
	0x56, 0x1b, 0x0d, 0x22, 0x90, 0x0e, 0x46, 0x69,
	0x2b, 0x83, 0x88, 0x11, 0x48, 0x07, 0x23, 0xba,
	0x9b, 0xcf, 0x44, 0x86, 0x24, 0x8d, 0x9f, 0x5d,
	0xc3, 0xe9, 0x22, 0x43, 0x12, 0xc8, 0xc1, 0xa0,
	0xef, 0xfa, 0x11, 0xaf, 0x09, 0x64, 0xee, 0x50,
	0xf9, 0x7d, 0x86, 0xd9, 0x8a, 0x32, 0x77, 0x28,
	0xe4, 0xfa, 0x20, 0x54, 0xa8, 0x0b, 0x32, 0x9c,
	0x72, 0x7d, 0x10, 0x2a, 0x54, 0x8b, 0x19, 0x4e,
	0x39, 0xb0, 0x08, 0x15, 0x2a, 0xcb, 0x82, 0x27,
	0x92, 0x58, 0x04, 0x84, 0x15, 0xeb, 0x41, 0x9d,
	0x49, 0x2c, 0x02, 0x42, 0x84, 0xfb, 0xae, 0xc0,
	0xaa, 0x16, 0x01, 0x21, 0x42, 0xf3, 0x57, 0x60,
	0x55, 0x0b, 0x8e, 0x9e, 0x21, 0xf7, 0xa5, 0x30,
	0xa4, 0x8b, 0x47, 0x4f, 0x9e, 0xf5, 0xdc, 0x18,
	0x70, 0xa6, 0xa5, 0x6e, 0x24, 0x40, 0x59, 0x8e,
	0x38, 0x53, 0xdc, 0x37, 0x12, 0x20, 0xa2, 0x47,
	0x1c, 0xa7, 0x6e, 0x95, 0x09, 0x10, 0x51, 0xad,
	0x0e, 0xdd, 0x37, 0xc4, 0x8a, 0x08, 0xa6, 0xd8,
	0x07, 0xe0, 0x95, 0x62, 0x45, 0x04, 0x53, 0x6c,
	0x8d, 0x70, 0xc4, 0x31, 0xac, 0x02, 0xa7, 0x36,
	0xc8, 0x38, 0x62, 0x96, 0x56, 0x01, 0xdd, 0x1b,
	0x64, 0x1c, 0x31, 0x4b, 0x2b, 0x8e, 0xe0, 0x83
};
/* итерационные константы C1...C12 */
static uint8_t constants[] =
{
	0xb1, 0x08, 0x5b, 0xda, 0x1e, 0xca, 0xda, 0xe9, 0xeb, 0xcb, 0x2f, 0x81, 0xc0, 0x65, 0x7c, 0x1f,
	0x2f, 0x6a, 0x76, 0x43, 0x2e, 0x45, 0xd0, 0x16, 0x71, 0x4e, 0xb8, 0x8d, 0x75, 0x85, 0xc4, 0xfc,
	0x4b, 0x7c, 0xe0, 0x91, 0x92, 0x67, 0x69, 0x01, 0xa2, 0x42, 0x2a, 0x08, 0xa4, 0x60, 0xd3, 0x15,
	0x05, 0x76, 0x74, 0x36, 0xcc, 0x74, 0x4d, 0x23, 0xdd, 0x80, 0x65, 0x59, 0xf2, 0xa6, 0x45, 0x07,
	0x6f, 0xa3, 0xb5, 0x8a, 0xa9, 0x9d, 0x2f, 0x1a, 0x4f, 0xe3, 0x9d, 0x46, 0x0f, 0x70, 0xb5, 0xd7,
	0xf3, 0xfe, 0xea, 0x72, 0x0a, 0x23, 0x2b, 0x98, 0x61, 0xd5, 0x5e, 0x0f, 0x16, 0xb5, 0x01, 0x31,
	0x9a, 0xb5, 0x17, 0x6b, 0x12, 0xd6, 0x99, 0x58, 0x5c, 0xb5, 0x61, 0xc2, 0xdb, 0x0a, 0xa7, 0xca,
	0x55, 0xdd, 0xa2, 0x1b, 0xd7, 0xcb, 0xcd, 0x56, 0xe6, 0x79, 0x04, 0x70, 0x21, 0xb1, 0x9b, 0xb7,
	0xf5, 0x74, 0xdc, 0xac, 0x2b, 0xce, 0x2f, 0xc7, 0x0a, 0x39, 0xfc, 0x28, 0x6a, 0x3d, 0x84, 0x35,
	0x06, 0xf1, 0x5e, 0x5f, 0x52, 0x9c, 0x1f, 0x8b, 0xf2, 0xea, 0x75, 0x14, 0xb1, 0x29, 0x7b, 0x7b,
	0xd3, 0xe2, 0x0f, 0xe4, 0x90, 0x35, 0x9e, 0xb1, 0xc1, 0xc9, 0x3a, 0x37, 0x60, 0x62, 0xdb, 0x09,
	0xc2, 0xb6, 0xf4, 0x43, 0x86, 0x7a, 0xdb, 0x31, 0x99, 0x1e, 0x96, 0xf5, 0x0a, 0xba, 0x0a, 0xb2,
	0xef, 0x1f, 0xdf, 0xb3, 0xe8, 0x15, 0x66, 0xd2, 0xf9, 0x48, 0xe1, 0xa0, 0x5d, 0x71, 0xe4, 0xdd,
	0x48, 0x8e, 0x85, 0x7e, 0x33, 0x5c, 0x3c, 0x7d, 0x9d, 0x72, 0x1c, 0xad, 0x68, 0x5e, 0x35, 0x3f,
	0xa9, 0xd7, 0x2c, 0x82, 0xed, 0x03, 0xd6, 0x75, 0xd8, 0xb7, 0x13, 0x33, 0x93, 0x52, 0x03, 0xbe,
	0x34, 0x53, 0xea, 0xa1, 0x93, 0xe8, 0x37, 0xf1, 0x22, 0x0c, 0xbe, 0xbc, 0x84, 0xe3, 0xd1, 0x2e,
	0x4b, 0xea, 0x6b, 0xac, 0xad, 0x47, 0x47, 0x99, 0x9a, 0x3f, 0x41, 0x0c, 0x6c, 0xa9, 0x23, 0x63,
	0x7f, 0x15, 0x1c, 0x1f, 0x16, 0x86, 0x10, 0x4a, 0x35, 0x9e, 0x35, 0xd7, 0x80, 0x0f, 0xff, 0xbd,
	0xbf, 0xcd, 0x17, 0x47, 0x25, 0x3a, 0xf5, 0xa3, 0xdf, 0xff, 0x00, 0xb7, 0x23, 0x27, 0x1a, 0x16,
	0x7a, 0x56, 0xa2, 0x7e, 0xa9, 0xea, 0x63, 0xf5, 0x60, 0x17, 0x58, 0xfd, 0x7c, 0x6c, 0xfe, 0x57,
	0xae, 0x4f, 0xae, 0xae, 0x1d, 0x3a, 0xd3, 0xd9, 0x6f, 0xa4, 0xc3, 0x3b, 0x7a, 0x30, 0x39, 0xc0,
	0x2d, 0x66, 0xc4, 0xf9, 0x51, 0x42, 0xa4, 0x6c, 0x18, 0x7f, 0x9a, 0xb4, 0x9a, 0xf0, 0x8e, 0xc6,
	0xcf, 0xfa, 0xa6, 0xb7, 0x1c, 0x9a, 0xb7, 0xb4, 0x0a, 0xf2, 0x1f, 0x66, 0xc2, 0xbe, 0xc6, 0xb6,
	0xbf, 0x71, 0xc5, 0x72, 0x36, 0x90, 0x4f, 0x35, 0xfa, 0x68, 0x40, 0x7a, 0x46, 0x64, 0x7d, 0x6e,
	0xf4, 0xc7, 0x0e, 0x16, 0xee, 0xaa, 0xc5, 0xec, 0x51, 0xac, 0x86, 0xfe, 0xbf, 0x24, 0x09, 0x54,
	0x39, 0x9e, 0xc6, 0xc7, 0xe6, 0xbf, 0x87, 0xc9, 0xd3, 0x47, 0x3e, 0x33, 0x19, 0x7a, 0x93, 0xc9,
	0x09, 0x92, 0xab, 0xc5, 0x2d, 0x82, 0x2c, 0x37, 0x06, 0x47, 0x69, 0x83, 0x28, 0x4a, 0x05, 0x04,
	0x35, 0x17, 0x45, 0x4c, 0xa2, 0x3c, 0x4a, 0xf3, 0x88, 0x86, 0x56, 0x4d, 0x3a, 0x14, 0xd4, 0x93,
	0x9b, 0x1f, 0x5b, 0x42, 0x4d, 0x93, 0xc9, 0xa7, 0x03, 0xe7, 0xaa, 0x02, 0x0c, 0x6e, 0x41, 0x41,
	0x4e, 0xb7, 0xf8, 0x71, 0x9c, 0x36, 0xde, 0x1e, 0x89, 0xb4, 0x44, 0x3b, 0x4d, 0xdb, 0xc4, 0x9a,
	0xf4, 0x89, 0x2b, 0xcb, 0x92, 0x9b, 0x06, 0x90, 0x69, 0xd1, 0x8d, 0x2b, 0xd1, 0xa5, 0xc4, 0x2f,
	0x36, 0xac, 0xc2, 0x35, 0x59, 0x51, 0xa8, 0xd9, 0xa4, 0x7f, 0x0d, 0xd4, 0xbf, 0x02, 0xe7, 0x1e,
	0x37, 0x8f, 0x5a, 0x54, 0x16, 0x31, 0x22, 0x9b, 0x94, 0x4c, 0x9a, 0xd8, 0xec, 0x16, 0x5f, 0xde,
	0x3a, 0x7d, 0x3a, 0x1b, 0x25, 0x89, 0x42, 0x24, 0x3c, 0xd9, 0x55, 0xb7, 0xe0, 0x0d, 0x09, 0x84,
	0x80, 0x0a, 0x44, 0x0b, 0xdb, 0xb2, 0xce, 0xb1, 0x7b, 0x2b, 0x8a, 0x9a, 0xa6, 0x07, 0x9c, 0x54,
	0x0e, 0x38, 0xdc, 0x92, 0xcb, 0x1f, 0x2a, 0x60, 0x72, 0x61, 0x44, 0x51, 0x83, 0x23, 0x5a, 0xdb,
	0xab, 0xbe, 0xde, 0xa6, 0x80, 0x05, 0x6f, 0x52, 0x38, 0x2a, 0xe5, 0x48, 0xb2, 0xe4, 0xf3, 0xf3,
	0x89, 0x41, 0xe7, 0x1c, 0xff, 0x8a, 0x78, 0xdb, 0x1f, 0xff, 0xe1, 0x8a, 0x1b, 0x33, 0x61, 0x03,
	0x9f, 0xe7, 0x67, 0x02, 0xaf, 0x69, 0x33, 0x4b, 0x7a, 0x1e, 0x6c, 0x30, 0x3b, 0x76, 0x52, 0xf4,
	0x36, 0x98, 0xfa, 0xd1, 0x15, 0x3b, 0xb6, 0xc3, 0x74, 0xb4, 0xc7, 0xfb, 0x98, 0x45, 0x9c, 0xed,
	0x7b, 0xcd, 0x9e, 0xd0, 0xef, 0xc8, 0x89, 0xfb, 0x30, 0x02, 0xc6, 0xcd, 0x63, 0x5a, 0xfe, 0x94,
	0xd8, 0xfa, 0x6b, 0xbb, 0xeb, 0xab, 0x07, 0x61, 0x20, 0x01, 0x80, 0x21, 0x14, 0x84, 0x66, 0x79,
	0x8a, 0x1d, 0x71, 0xef, 0xea, 0x48, 0xb9, 0xca, 0xef, 0xba, 0xcd, 0x1d, 0x7d, 0x47, 0x6e, 0x98,
	0xde, 0xa2, 0x59, 0x4a, 0xc0, 0x6f, 0xd8, 0x5d, 0x6b, 0xca, 0xa4, 0xcd, 0x81, 0xf3, 0x2d, 0x1b,
	0x37, 0x8e, 0xe7, 0x67, 0xf1, 0x16, 0x31, 0xba, 0xd2, 0x13, 0x80, 0xb0, 0x04, 0x49, 0xb1, 0x7a,
	0xcd, 0xa4, 0x3c, 0x32, 0xbc, 0xdf, 0x1d, 0x77, 0xf8, 0x20, 0x12, 0xd4, 0x30, 0x21, 0x9f, 0x9b,
	0x5d, 0x80, 0xef, 0x9d, 0x18, 0x91, 0xcc, 0x86, 0xe7, 0x1d, 0xa4, 0xaa, 0x88, 0xe1, 0x28, 0x52,
	0xfa, 0xf4, 0x17, 0xd5, 0xd9, 0xb2, 0x1b, 0x99, 0x48, 0xbc, 0x92, 0x4a, 0xf1, 0x1b, 0xd7, 0x20
};
static const uint8_t null_block[] =
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static void xor_blocks(const uint8_t* a, const uint8_t* b, uint8_t* c)
{
	int				i = 0;
	const uint64_t	*_a, *_b;
	uint64_t		*_c;
	_a = (const uint64_t*)a;
	_b = (const uint64_t*)b;
	_c = (uint64_t*)c;
	for (i = 0; i < STRIBOG_STATE_LENGTH / sizeof(uint64_t); i++)
	{
		*(_c++) = *(_a++) ^ *(_b++);
	}
}
static void add_blocks_mod512(const uint8_t* a, const uint8_t* b, uint8_t* c)
{
	int i = 0;
	uint16_t tmp = 0;
	for (i = STRIBOG_STATE_LENGTH - 1; i >= 0; i--)
	{
		tmp = a[i] + b[i] + (tmp >> 8);
		c[i] = tmp & 0xff;
	}
}
static void transform_substitution(uint8_t* block)
{
	int i = 0;
	for (i = 0; i < STRIBOG_STATE_LENGTH; i++)
	{
		block[i] = pi[block[i]];
	}
}
static void transform_permutation(uint8_t* block)
{
	int i = 0;
	uint8_t transformed_block[STRIBOG_STATE_LENGTH];
	for (i = 0; i < STRIBOG_STATE_LENGTH; i++)
	{
		transformed_block[i] = block[tau[i]];
	}
	memcpy(block, transformed_block, STRIBOG_STATE_LENGTH);
}
static void transform_linear_chunk(uint8_t* chunk)
{
	/* Индекс текущего байта */
	int idx_byte = 0;
	/* Индекс текущего бита */
	int idx_bit = 0;
	uint64_t result = 0;
	for (idx_byte = 0; idx_byte < 8; idx_byte++)
	{
		for (idx_bit = 7; idx_bit >= 0; idx_bit--)
		{
			if (chunk[idx_byte] & (1 << idx_bit))
			{
				result ^= *((uint64_t*)a_matrix + (63 - (7 - idx_byte) * 8 - idx_bit));
			}
		}
	}
	memcpy(chunk, &result, 8);
}
static void transform_linear(uint8_t* block)
{
	int i;
	uint8_t* chunk = block;
	for (i = 0; i < 8; i++)
	{
		transform_linear_chunk(chunk);
		chunk += 8;
	}
}
static void transform_lps(uint8_t* block)
{
	transform_substitution(block);
	transform_permutation(block);
	transform_linear(block);
}
static void transform_e(const uint8_t* m, uint8_t* K)
{
	int i = 0;
	uint8_t	tmp[STRIBOG_STATE_LENGTH];
	memcpy(tmp, m, STRIBOG_STATE_LENGTH);
	for (i = 0; i < 12; i++)
	{
		xor_blocks(K, tmp, tmp);
		transform_lps(tmp);
		xor_blocks(K, constants + i * STRIBOG_STATE_LENGTH, K);
		transform_lps(K);
	}
	xor_blocks(K, tmp, K);
}
static void gN(const uint8_t* N, const uint8_t* m, uint8_t* h)
{
	uint8_t K[STRIBOG_STATE_LENGTH];
	xor_blocks(h, N, K);
	transform_lps(K);
	transform_e(m, K);
	xor_blocks(K, h, h);
	xor_blocks(h, m, h);
}
static void update_message_len(uint8_t* N, size_t len)
{
	uint8_t  len_block[STRIBOG_STATE_LENGTH];
	uint16_t bit_len = len * 8;
	memset(len_block, 0, STRIBOG_STATE_LENGTH);
	len_block[STRIBOG_STATE_LENGTH - 2] = (uint8_t)(bit_len >> 8);
	len_block[STRIBOG_STATE_LENGTH - 1] = (uint8_t)(bit_len >> 0);
	add_blocks_mod512(N, len_block, N);
}
static void update_message_checksum(uint8_t* S, uint8_t* message_block)
{
	add_blocks_mod512(S, message_block, S);
}
void stribog_hash_512(const uint8_t* data, size_t len, uint8_t* hash)
{
	uint8_t h[STRIBOG_STATE_LENGTH] = {0};
	uint8_t N[STRIBOG_STATE_LENGTH] = {0};
	uint8_t S[STRIBOG_STATE_LENGTH] = {0};
	while(len >= STRIBOG_STATE_LENGTH)
	{
		uint8_t m[STRIBOG_STATE_LENGTH];
		memcpy(m, data + len - STRIBOG_STATE_LENGTH, STRIBOG_STATE_LENGTH);
		len -= STRIBOG_STATE_LENGTH;
		gN(N, m, h);
		update_message_len(N, STRIBOG_STATE_LENGTH);
		update_message_checksum(S, m);
	}
	if (len > 0)
	{
		uint8_t m[STRIBOG_STATE_LENGTH] = {0};
		memcpy(m + STRIBOG_STATE_LENGTH - len, data, len);
		m[STRIBOG_STATE_LENGTH - len - 1] = 0x01;
		
		gN(N, m, h);
		update_message_len(N, len);
		update_message_checksum(S, m);
	}
	gN(null_block, N, h);
	gN(null_block, S, h);
	memcpy(hash, h, STRIBOG_STATE_LENGTH);
}

class MagmaTestFixture : public ::testing::Test
{
public:
    const std::vector<uint8_t> data = {
        0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,
		0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,
		0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,
		0x34,0x33,0x32,0x31,0x30,0x39,0x38,0x37,0x36,0x35,0x34,0x33,0x32,0x31,0x30
    };
	std::vector<uint8_t> hash;
	const std::vector<uint8_t> expected = {
		0x48,0x6F,0x64,0xC1,0x91,0x78,0x79,0x41,0x7F,0xEF,0x08,0x2B,0x33,0x81,0xA4,0xE2,0x11,
		0xC3,0x24,0xF0,0x74,0x65,0x4C,0x38,0x82,0x3A,0x7B,0x76,0xF8,0x30,0xAD,0x00,0xFA,0x1F,
		0xBA,0xE4,0x2B,0x12,0x85,0xC0,0x35,0x2F,0x22,0x75,0x24,0xBC,0x9A,0xB1,0x62,0x54,0x28,
		0x8D,0xD6,0x86,0x3D,0xCC,0xD5,0xB9,0xF5,0x4A,0x1A,0xD0,0x54,0x1B
	};

};

TEST_F(MagmaTestFixture, Decrypt)
{	
	hash.resize(64);
	stribog_hash_512(data.data(),data.size(),hash.data());
    ASSERT_TRUE(hash == expected);
}



int main(int argc, const char** argv)
{
    ::testing::InitGoogleTest(&argc, const_cast<char**>(argv));
    return RUN_ALL_TESTS();	
}